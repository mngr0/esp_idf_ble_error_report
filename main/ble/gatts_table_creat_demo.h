/*
   This example code is in the Public Domain (or CC0 licensed, at your option.)

   Unless required by applicable law or agreed to in writing, this
   software is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
   CONDITIONS OF ANY KIND, either express or implied.
*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

/* Attributes State Machine */
enum
{
    IDX_SVC,
    IDX_CHAR_A,
    IDX_CHAR_VAL_A,
    // IDX_CHAR_CFG_A,

    IDX_CHAR_B,
    IDX_CHAR_VAL_B,

    IDX_CHAR_C,
    IDX_CHAR_VAL_C,

    IDX_CHAR_D,
    IDX_CHAR_VAL_D,
    // IDX_M_STATE,
    // IDX_AR_STATE,
    // IDX_AR_CONF,
    // IDX_AR_CONF_STATE,
    // IDX_BLUEFI,
    HRS_IDX_NB,
};

typedef enum
{
    GATT_AR_STATE_IDX_SERVICE,
    GATT_AR_STATE_IDX_COMPRESSOR_ACTUAL_SPEED_INDEX,
    GATT_AR_STATE_IDX_COMPRESSOR_LAST_SPEED_CHANGE_TIME,
    GATT_AR_STATE_IDX_COMPRESSOR_SPEED_TO_COMMAND,
    GATT_AR_STATE_IDX_COMPRESSOR_LAST_STOP,
    GATT_AR_STATE_IDX_COMPRESSOR_IS_BLOCKED,
    GATT_AR_STATE_IDX_COMPRESSOR_IS_RUNNING,
    GATT_AR_STATE_IDX_FAN_SPEED_TO_COMMAND,
    GATT_AR_STATE_IDX_FAN_TIME_LAST_COMMAND,
    GATT_AR_STATE_NB
} gatt_ar_state_t;

typedef enum
{
    GATT_M_STATE_IDX_SERVICE,
    GATT_M_STATE_IDX_EVAPORATION_PRESSURE,
    GATT_M_STATE_IDX_CONDENSATION_PRESSURE,
    GATT_M_STATE_IDX_TEMPERATURE_GAS_SCARICO,
    GATT_M_STATE_IDX_TEMPERATURE_ENVIRONMENT,
    GATT_M_STATE_IDX_TEMPERATURE_GAS_RITORNO,
    GATT_M_STATE_IDX_TEMPERATURE_EXTRA,
    GATT_M_STATE_IDX_IMC102_COMMUNICATION,
    GATT_M_STATE_IDX_IMC102_MOTOR,
    GATT_M_STATE_IDX_IMC102_STATUS_SPEED,
    GATT_M_STATE_IDX_IMC102_STATUS_TARGET_SPEED,
    GATT_M_STATE_IDX_IMC102_STATUS_ERROR,
    GATT_M_STATE_IDX_IMM101_COMMUNICATION,
    GATT_M_STATE_IDX_IMM101_MOTOR,
    GATT_M_STATE_IDX_IMM101_STATUS_SPEED,
    GATT_M_STATE_IDX_IMM101_STATUS_TARGET_SPEED,
    GATT_M_STATE_IDX_IMM101_STATUS_ERROR,
    GATT_M_STATE_IDX_PIN_ENABLE,
    GATT_M_STATE_IDX_AR_ERROR,
    GATT_M_STATE_IDX_AR_STATUS,
    GATT_M_STATE_NB
} gatt_m_state_t;

typedef enum
{
    GATT_AR_CONF_IDX_SERVICE,
    GATT_AR_CONF_IDX_FAN_TARGET_PRESSURE,
    GATT_AR_CONF_IDX_FAN_COEFF_P,
    GATT_AR_CONF_IDX_FAN_COEFF_OFFSET,
    GATT_AR_CONF_IDX_FAN_MIN_PRESSURE,
    GATT_AR_CONF_IDX_FAN_MAX_PRESSURE,
    GATT_AR_CONF_IDX_COMPRESSOR_TARGET_PRESSURE,
    GATT_AR_CONF_IDX_COMPRESSOR_ACTIVATION_OFFSET,
    GATT_AR_CONF_IDX_COMPRESSOR_ACTION_DELAY,
    GATT_AR_CONF_IDX_COMPRESSOR_START_INTERVAL,
    ATT_AR_CONF_IDX_LP_LOW_PRESSURE_LIMIT,
    GATT_AR_CONF_IDX_COMPRESSOR_SPEED1,
    GATT_AR_CONF_IDX_COMPRESSOR_SPEED2,
    GATT_AR_CONF_IDX_COMPRESSOR_SPEED3,
    GATT_AR_CONF_IDX_COMPRESSOR_SPEED4,
    GATT_AR_CONF_IDX_COMPRESSOR_SPEED5,
    GATT_AR_CONF_IDX_COMPRESSOR_SPEED6,
    GATT_AR_CONF_IDX_COMPRESSOR_SPEED7,
    GATT_AR_CONF_IDX_COMPRESSOR_SPEED8,
    GATT_AR_CONF_NB
} gatt_ar_conf_t;


typedef enum
{
    GATT_BLUEFI_IDX_SERVICE,
    GATT_BLUEFI_NB
} gatt_bluefi_t;

#define BLINK_GPIO1 2
#define BLINK_GPIO2 15
#define BLINK_GPIO3 13
#define BTN_GPIO 3