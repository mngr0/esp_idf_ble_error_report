// Example IDL file for our monster's schema.


namespace AirRef;


enum ErrorState:int{
	error_state_none=0,
	error_state_warning,
	error_state_critical
}

enum ControlType:int{
	control_type_manual_off=0,
	control_type_manual_on,
	control_type_auto
}

enum AirRefIndexError:int{
	index_error_pressure_evap=0,
	index_error_pressure_cond,
	
	index_error_temperature_gas_scarico,
	index_error_temperature_environment,
	index_error_temperature_gas_ritorno,
	index_error_temperature_extra,
	index_error_imm101_motor,
	index_error_imm101_communication,
	index_error_imc102_motor,
	index_error_imc102_communication,
	
	index_error_overtemperature_gas_scarico,
	index_low_pressure_protection,
	index_error_size
}

enum AirRefStatus :int{
	air_ref_status_idle=0,
	air_ref_status_run_start,
	air_ref_status_run_full,
	air_ref_status_run_pre_sbrinamento,
	air_ref_status_run_sbrinamento,
	air_ref_status_run_post_sbrinamento,
	air_ref_status_critical_error
}


struct ErrorReport{
	error_state:ErrorState;
	error_code:int;  
}

struct ErrorList{
  errors:[ErrorReport:12];
}

struct MotorStatus{
  state:[int:10];
}

table AirRefConf{
	control_type:ControlType;

	air_ref_start_interval: int = -1;

	termostatica_surriscaldo_setpoint:int =-1;
	termostatica_coeff_P:int =-1;
	termostatica_coeff_I:int =-1;
	termostatica_coeff_I_max:int =-1;
	termostatica_max_step:int =-1;
	

	fan_target_pressure:int =-1;
	fan_coeff_p:int =-1;
	fan_coeff_offset:int =-1;
	fan_min_pressure:int =-1; //(milliBar)
	fan_max_pressure:int =-1; //(milliBar)
	
	compressor_target_pressure:int =-1; //millibar
	compressor_coeff_P: int =-1;
	compressor_coeff_I: int =-1;
	compressor_start_interval:int =-1;
	compressor_speed:int =-1;
	compressor_start_speed:int =-1;
	compressor_pressure_spike:int =-1;

	period_log:int=-1;

	LP_low_pressure_limit:int = -1;
	LP_low_pressure_recover:int = -1;
}

table AirRefState{

	air_ref_start_timestamp:int=-1;
	air_ref_status:AirRefStatus;

	compressor_calculated_speed:int=-1;
	compressor_speed_to_command:int=-1;
	compressor_I_value:int=-1;
	compressor_last_stop:int=-1;
	compressor_is_blocked:int=-1;
	compressor_is_running:int=-1;

	fan_speed_to_command:int=-1;
	fan_time_last_command:int=-1;
	
	termostatica_I_value:int=-1;
	termostatica_step_target:int=-1;
	termostatica_step_current_position:int=-1;

	debounce_input_timestamp:int =-1;
	debounce_input_current_state:int=-1;
}

table MachineState{
	evaporation_pressure:int =0;
	evaporation_temperature:int =0;
	condensation_pressure:int =0;
	temperature_gas_scarico:int =0;
	temperature_environment:int =0;
	temperature_gas_ritorno:int =0;
	temperature_extra:int =0;

	imc102_motor:ErrorReport;
	imc102_status:MotorStatus;

	imm101_motor:ErrorReport;
	imm101_status:MotorStatus;
	
	pin_enable:int=-1;
	ar_error:ErrorList;
}

enum RequestType: int{
	RequestAirRefConf=0,
	RequestAirRefState,
	RequestMachineState,
	RequestLoggerState,
	AirRefConfReceived
}

table Request{
	request_type: RequestType;
}

enum LoggerCommunicationState: int{
	CommunicationIdle=0,
	ComunicationDone,
	CommunicationFailed
}


table LoggerState{
	state: LoggerCommunicationState;
}


enum LoggerCommandType:int{
	list_files=0,
	delete_file,
	download_file
}


table LoggerCommand{
	loggerCommandType : LoggerCommandType;
    parameter: string;
}

table LoggerReply{
    fileList: [string];
    fileContent: string;
}


table WifiCredentials{
    ssid: string;
    password: string;
}


table BluefiCommand{
    wifiCredential: WifiCredentials;
    doScan: int;
}

table BluefiReply{
    wifiCredentials: [WifiCredentials];
}


union Content{
  AirRefConf,
  AirRefState,
  MachineState,
  Request,
  BluefiCommand,
  BluefiReply,
  LoggerCommand,
  LoggerReply
}

table Message{
  content: Content;
}

root_type Message;
