#ifndef LOGGER_BUILDER_H
#define LOGGER_BUILDER_H

/* Generated by flatcc 0.6.1-dev FlatBuffers schema compiler for C by dvide.com */

#ifndef LOGGER_READER_H
#include "logger_reader.h"
#endif
#ifndef FLATBUFFERS_COMMON_BUILDER_H
#include "flatbuffers_common_builder.h"
#endif
#include "flatcc/flatcc_prologue.h"
#ifndef flatbuffers_identifier
#define flatbuffers_identifier 0
#endif
#ifndef flatbuffers_extension
#define flatbuffers_extension "bin"
#endif

#define __LoggerCommandType_formal_args , LoggerCommandType_enum_t v0
#define __LoggerCommandType_call_args , v0
__flatbuffers_build_scalar(flatbuffers_, LoggerCommandType, LoggerCommandType_enum_t)

static const flatbuffers_voffset_t __LoggerCommand_required[] = { 0 };
typedef flatbuffers_ref_t LoggerCommand_ref_t;
static LoggerCommand_ref_t LoggerCommand_clone(flatbuffers_builder_t *B, LoggerCommand_table_t t);
__flatbuffers_build_table(flatbuffers_, LoggerCommand, 2)

static const flatbuffers_voffset_t __LoggerReply_required[] = { 0 };
typedef flatbuffers_ref_t LoggerReply_ref_t;
static LoggerReply_ref_t LoggerReply_clone(flatbuffers_builder_t *B, LoggerReply_table_t t);
__flatbuffers_build_table(flatbuffers_, LoggerReply, 2)

#define __LoggerCommand_formal_args , LoggerCommandType_enum_t v0, flatbuffers_string_ref_t v1
#define __LoggerCommand_call_args , v0, v1
static inline LoggerCommand_ref_t LoggerCommand_create(flatbuffers_builder_t *B __LoggerCommand_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, LoggerCommand, LoggerCommand_file_identifier, LoggerCommand_type_identifier)

#define __LoggerReply_formal_args , flatbuffers_string_vec_ref_t v0, flatbuffers_string_ref_t v1
#define __LoggerReply_call_args , v0, v1
static inline LoggerReply_ref_t LoggerReply_create(flatbuffers_builder_t *B __LoggerReply_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, LoggerReply, LoggerReply_file_identifier, LoggerReply_type_identifier)

__flatbuffers_build_scalar_field(0, flatbuffers_, LoggerCommand_loggerCommandType, LoggerCommandType, LoggerCommandType_enum_t, 4, 4, INT32_C(0), LoggerCommand)
__flatbuffers_build_string_field(1, flatbuffers_, LoggerCommand_parameter, LoggerCommand)

static inline LoggerCommand_ref_t LoggerCommand_create(flatbuffers_builder_t *B __LoggerCommand_formal_args)
{
    if (LoggerCommand_start(B)
        || LoggerCommand_loggerCommandType_add(B, v0)
        || LoggerCommand_parameter_add(B, v1)) {
        return 0;
    }
    return LoggerCommand_end(B);
}

static LoggerCommand_ref_t LoggerCommand_clone(flatbuffers_builder_t *B, LoggerCommand_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (LoggerCommand_start(B)
        || LoggerCommand_loggerCommandType_pick(B, t)
        || LoggerCommand_parameter_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, LoggerCommand_end(B));
}

__flatbuffers_build_string_vector_field(0, flatbuffers_, LoggerReply_fileList, LoggerReply)
__flatbuffers_build_string_field(1, flatbuffers_, LoggerReply_fileContent, LoggerReply)

static inline LoggerReply_ref_t LoggerReply_create(flatbuffers_builder_t *B __LoggerReply_formal_args)
{
    if (LoggerReply_start(B)
        || LoggerReply_fileList_add(B, v0)
        || LoggerReply_fileContent_add(B, v1)) {
        return 0;
    }
    return LoggerReply_end(B);
}

static LoggerReply_ref_t LoggerReply_clone(flatbuffers_builder_t *B, LoggerReply_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (LoggerReply_start(B)
        || LoggerReply_fileList_pick(B, t)
        || LoggerReply_fileContent_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, LoggerReply_end(B));
}

#include "flatcc/flatcc_epilogue.h"
#endif /* LOGGER_BUILDER_H */
